{
    "cognito": {
        "overview": "A login service.  This seems to have two main (practical) purposes.  One, it manages users and logins for apps and websites so you don't have to. Two, it helps manage access to AWS services without having to have an application to do it for them.",
        "User Pools": {
            "description": "A user directory!  Users can register/signin with email/pass, or use SSO from facebook/google/etc...  Includes top notch account protection.",
            "features": [
                {
                    "name": "Hosted UI",
                    "description": "Delivers a register/login/SSO page that users can use in your app or on the web"
                },
                {
                    "name": "Lambda Triggers",
                    "description": "Lots of lifecycle hooks where you can register a lambda to customize functionality",
                    "examples": [
                        "Deny logins",
                        "Pre signup",
                        "Post signup",
                        "Customize messages",
                        "etc"
                    ]
                },
                {
                    "name": "Amazon Pinpoint",
                    "description": "Integrates with amazon pinpoint, whatever that is"
                },
                {
                    "name": "user pool tokens",
                    "description": "When a user registers, Amazon Cognito will share the user pool tokens with you, and those are what will be passed along by logged in users.  Therefore you can use these to identify users and limit access to your own resources (or whatever)"
                }
            ]
        },
        "Identity Pools": {
            "description": "Grant AWS credentials to users in user pools so they can access AWS resources.  Access is granted to the identity pool, and a variety of kinds of users can be included in the identity pool",
            "user sources": [
                "Amazon Cognito User Pool",
                "Users from external identity providers (Facebook, Google, SAML, etc...)",
                "Users authenticated through your own process",
                "Unauthenticated users"
            ],
            "identity types": [
                "Authenticated",
                "Unauthenticated"
            ],
            "Data sets": "Apparently there are data sets that can be set and synced per identity?"
        },
        "pricing": [
            "Pay per MAU (monthly active user).  Any user who does anything in a given calendar month (register, login, etc...) qualifies as a MAU.",
            "Different cost tiers for users who sign in directly and users via SSO/Federation",
            "There is a permanent free tier",
            "There are advanced features (includes auditing) which add additional costs, and are much more expensive than the base price (starts at $.05 per user)",
            "There are additional costs for SMS sent for MFA",
            "Additional pricing for Cognito Sync",
            "For SAML/SSO/Federation users you get 50 free users and then $0.015 per additional user",
            "For users who login directly the first 50,000 are free"
        ],
        "pricing_tiers_for_direct_login": [
            {
                "MAU_min": 50001,
                "MAU_max": 100000,
                "usd_per_MAU": 0.0055
            },
            {
                "MAU_min": 100001,
                "MAU_max": 1000000,
                "usd_per_MAU": 0.0046
            },
            {
                "MAU_min": 1000001,
                "MAU_max": 10000000,
                "usd_per_MAU": 0.00325
            },
            {
                "MAU_min": 10000001,
                "usd_per_MAU": 0.0025
            }
        ]
    },
    "terms": [
        {
            "name": "Resources",
            "description": "Things saved in IAM: users, groups, roles, policies, identity objects"
        },
        {
            "name": "Identities",
            "description": "Resources used to identify someone/something.  The doc says, The IAM resource objects that are used to identify and group. You can attach a policy to an IAM identity. These include users, groups, and roles."
        },
        {
            "name": "Entities",
            "description": "Resources used to authenticate: Users, federated users, assumed IAM roles"
        },
        {
            "name": "Principal",
            "description": "The actual person or thing making the request, which uses a root user, IAM user, or role to sign in and make requests."
        },
        {
            "name": "Root User",
            "description": "The user first created when making the account.  Should bascially never be used."
        },
        {
            "name": "Federated User",
            "description": "A user who is granted access to AWS via an external user management system (aka LDAP, Sign in with Google/Facebook/Amazon, etc...).  This way you don't have to create all your IAM users manually",
            "also": "Federated users get permissions from roles"
        },
        {
            "name": "Group",
            "description": "Policies are attached to groups, and users can be attached to groups.  Users can be in more than one group"
        },
        {
            "name": "Request",
            "description": "When anyone tries to do anything they must send a request to AWS with auth details",
            "requirements": [
                "Actions or Operations to execute",
                "Resources: The AWS resource to apply actions to",
                "Principal: The person/application that used an entity to send the request.  Includes the policies associated with the entity",
                "Environment data: IP Address, user agent, SSL status, time of day, etc...",
                "Resource data: Additional data for the resource (DynamoDB Table name, EC2 instance tags, etc...)"
            ]
        },
        {
            "name": "Authentication",
            "description": "A principal must be authenticated (signed in) to AWS to make requests"
        },
        {
            "name": "Authorization",
            "description": "Check for actual permission to execute the given request (root user pretty much always has authorization)",
            "rules": [
                "An explict deny overrides all else",
                "Deny from Organizations SCP, IAM permissions boundary, or a session policy will deny the request",
                "An explicit allow will allow the request",
                "Otherwise requests are denied by default",
            ]
        },
        {
            "name": "Actions or Operations",
            "description": "Authorization must include the action or operation being performed.  Operations are defined per-service and are things like `CreateUser`, `GetUser`, etc..."
        },
        {
            "name": "Resources",
            "description": "Authorization also checks the resource which includes things like a particular EC2 instance, S3 bucket, etc..."
        },
        {
            "name": "ABAC",
            "description": "Attribute Based Access Controls.  In short, add permissions based on attributes and then add those attributes to resources"
        },
        {
            "name": "Role vs Resource Based Permissions",
            "description": "For cross account purposes you can assign permissions to a resource granting cross account access to a principal.  The advantage of this (especially for users) is that the given principal can then access that resource without having to change access.  For instance if you used role-based access then a user may have to switch roles to access the cross account resource, so they can't simultaneously access resources in both accounts"
        }
    ],

}
